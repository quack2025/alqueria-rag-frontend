// utils/responseCleanup.ts - Utilidades para limpiar respuestas del backend

/**
 * Limpia las respuestas del backend eliminando sugerencias autom√°ticas innecesarias
 */
export function cleanRAGResponse(content: string): string {
  if (!content) return '';

  // Validar que content sea un string
  if (typeof content !== 'string') {
    console.warn('cleanRAGResponse received non-string content:', typeof content, content);
    return String(content); // Convertir a string si no lo es
  }

  // Patrones para identificar y remover las secciones de sugerencias
  const patternsToRemove = [
    // Patr√≥n principal: "---" seguido de sugerencias
    /---\s*\n\s*### üí°.*?(?=\n\n|$)/gs,
    
    // Patr√≥n espec√≠fico: "¬øQu√© m√°s te gustar√≠a explorar?"
    /### üí° ¬øQu√© m√°s te gustar√≠a explorar\?.*?(?=\n\n|$)/gs,
    
    // Patr√≥n para secciones de acciones recomendadas
    /\*\*‚ö° Acciones Recomendadas\*\*.*?(?=\n\n|$)/gs,
    
    // Patr√≥n para preguntas relacionadas
    /\*\*‚ùì Preguntas Relacionadas\*\*.*?(?=\n\n|$)/gs,
    
    // Patr√≥n para visualizaciones disponibles
    /\*\*üìä Visualizaciones Disponibles\*\*.*?(?=\n\n|$)/gs,
    
    // Patr√≥n para an√°lisis m√°s profundo
    /\*\*üîç An√°lisis M√°s Profundo\*\*.*?(?=\n\n|$)/gs,
    
    // Patr√≥n gen√©rico para cualquier secci√≥n que empiece con emoji + t√≠tulo
    /\*\*[üéØüìàüîç‚ö°‚ùìüìäüí°üöÄ].*?\*\*.*?(?=\n\n|$)/gs,
    
    // Texto espec√≠fico que aparece al final
    /\*Solo menciona qu√© te interesa y te ayudo a profundizar en esa √°rea\.\*/g,
    
    // Limpiar m√∫ltiples l√≠neas vac√≠as consecutivas
    /\n{3,}/g
  ];

  let cleanedContent = content;

  // Aplicar todos los patrones de limpieza
  patternsToRemove.forEach(pattern => {
    if (typeof cleanedContent === 'string') {
      cleanedContent = cleanedContent.replace(pattern, '');
    }
  });

  // Limpiar espacios y l√≠neas vac√≠as al final
  if (typeof cleanedContent === 'string') {
    cleanedContent = cleanedContent
      .replace(/\n{3,}/g, '\n\n') // M√°ximo 2 l√≠neas consecutivas
      .replace(/\s+$/g, '') // Remover espacios al final
      .trim();
  } else {
    cleanedContent = String(cleanedContent);
  }

  return cleanedContent;
}

/**
 * Limpia espec√≠ficamente las sugerencias de Tigo que aparecen en respuestas de Unilever
 */
export function removeIncorrectBrandSuggestions(content: string): string {
  if (!content) return '';

  // Validar que content sea un string
  if (typeof content !== 'string') {
    console.warn('removeIncorrectBrandSuggestions received non-string content:', typeof content, content);
    return String(content);
  }

  // Patrones espec√≠ficos para remover referencias incorrectas
  const incorrectPatterns = [
    // Referencias a Tigo en lugar de Unilever
    /¬øCu√°l es la penetraci√≥n de Tigo por ciudad\?/g,
    /¬øCu√°les son las ventajas competitivas de Tigo vs Claro\?/g,
    /¬øC√≥mo perciben los usuarios la calidad de se√±al de cada operador\?/g,
    /an√°lisis competitivo con Claro/g,

    // Referencias a Honduras cuando deber√≠a ser Colombia
    /Honduras|hondure√±a|hondure√±o/gi
  ];

  let cleanedContent = content;

  incorrectPatterns.forEach(pattern => {
    if (typeof cleanedContent === 'string') {
      cleanedContent = cleanedContent.replace(pattern, '');
    }
  });

  return cleanedContent;
}

/**
 * Funci√≥n principal que aplica todas las limpiezas
 */
export function processRAGResponse(content: string): string {
  if (!content) return '';

  // Validar que content sea un string
  if (typeof content !== 'string') {
    console.warn('processRAGResponse received non-string content:', typeof content, content);
    return String(content);
  }

  let processed = content;

  // Aplicar limpiezas en secuencia
  processed = cleanRAGResponse(processed);
  processed = removeIncorrectBrandSuggestions(processed);

  return processed;
}

/**
 * Funci√≥n helper para procesar respuestas completas del backend
 */
export function processCompleteRAGResponse(data: any): any {
  if (!data) return { answer: '', sources: [], metadata: {}, visualizations: [] };

  // Si es un string, procesarlo directamente
  if (typeof data === 'string') {
    return {
      answer: processRAGResponse(data),
      sources: [],
      metadata: {},
      visualizations: []
    };
  }

  // Si es un objeto, procesar el campo answer
  return {
    answer: processRAGResponse(data.answer || ''),
    sources: data.sources || [],
    metadata: data.metadata || {},
    visualizations: data.visualizations || []
  };
}