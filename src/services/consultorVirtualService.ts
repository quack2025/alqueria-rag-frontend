/**
 * Consultor Virtual Service - Evaluaci√≥n r√°pida de conceptos l√°cteos
 * Reemplaza el sistema complejo de entrevistas m√∫ltiples con an√°lisis directo
 */

import type { DairyConcept } from '../types/dairy.types';
import { alqueriaPersonas } from '../data/alqueriaPersonaSystem';

// Tipos espec√≠ficos para Consultor Virtual
export interface ConsultorEvaluation {
  conceptId: string;
  conceptName: string;
  evaluationMode: 'consultant';
  timestamp: string;
  recommendation: 'GO' | 'REFINE' | 'NO-GO';
  overallScore: number; // 1-10

  // An√°lisis por segmento
  segmentAnalysis: SegmentInsight[];

  // Resumen ejecutivo
  executiveSummary: {
    topBarriers: string[];
    topOpportunities: string[];
    keyRecommendations: string[];
    riskFactors: string[];
  };

  // An√°lisis Competitivo Detallado
  competitiveAnalysis: {
    mainCompetitor: string;
    competitiveAdvantages: string[];
    competitiveWeaknesses: string[];
    differentiationStrategy: string;
    marketPositioning: string;
  };

  // Journey de Adopci√≥n
  adoptionJourney: {
    awarenessStrategy: string;
    trialDrivers: string[];
    repeatPurchaseFactors: string[];
    potentialBlockers: string[];
  };

  // Ocasiones de Consumo
  consumptionOccasions: {
    primary: string[];
    secondary: string[];
    unexploredOpportunities: string[];
  };

  // Proyecci√≥n de Mercado
  marketProjection: {
    targetMarketSize: string;
    estimatedPenetration: string;
    growthPotential: string;
    timeToMarket: string;
  };

  // M√©tricas
  processingTime: number;
  confidence: number; // 1-10
}

export interface SegmentInsight {
  personaName: string;
  personaProfile: string; // "28 a√±os, profesional, Medell√≠n, NSE B"
  overallReaction: 'Positiva' | 'Neutral' | 'Negativa';

  // Insights espec√≠ficos
  keyBarriers: string[];
  keyOpportunities: string[];
  priceReaction: string;
  competitorComparison: string;
  purchaseIntent: number; // 1-10

  // Insights Profundos
  emotionalDrivers: string[];
  frictionPoints: string[];
  decisionInfluencers: string[];
  consumptionContext: string;

  // Cita representativa
  representativeQuote: string;

  // Quote adicional sobre momento de consumo
  consumptionMomentQuote?: string;
}

export class ConsultorVirtualService {
  private progressCallback?: (message: string) => void;

  constructor(progressCallback?: (message: string) => void) {
    this.progressCallback = progressCallback;
  }

  /**
   * Evaluaci√≥n principal del consultor virtual
   */
  async evaluateConcept(
    concept: DairyConcept,
    selectedPersonaIds?: string[]
  ): Promise<ConsultorEvaluation> {
    const startTime = Date.now();

    try {
      // Progress update
      this.updateProgress('üß† Consultor Virtual analizando concepto...');

      // Seleccionar personas (manual o autom√°tico)
      const selectedPersonas = this.selectRepresentativePersonas(selectedPersonaIds);

      // Generar an√°lisis con Claude en una sola llamada
      this.updateProgress('‚ö° Generando insights por segmento...');
      const analysis = await this.generateAnalysisWithClaude(concept, selectedPersonas);

      // Procesar y estructurar resultado
      this.updateProgress('üìä Consolidando recomendaciones...');
      const evaluation = this.processAnalysisToEvaluation(concept, analysis, startTime);

      this.updateProgress('‚úÖ Evaluaci√≥n completada');
      return evaluation;

    } catch (error) {
      console.error('‚ùå Error en Consultor Virtual:', error);

      // Generar evaluaci√≥n b√°sica de emergencia
      return this.generateEmergencyEvaluation(concept, startTime);
    }
  }

  /**
   * Seleccionar personas m√°s representativas del mercado l√°cteo colombiano
   */
  private selectRepresentativePersonas(selectedIds?: string[]) {
    // Si hay selecci√≥n manual, usar esas personas
    let personasToUse = alqueriaPersonas;

    if (selectedIds && selectedIds.length > 0) {
      personasToUse = alqueriaPersonas.filter(p =>
        selectedIds.includes(p.id)
      );
    } else {
      // Selecci√≥n autom√°tica: mix representativo (5 personas)
      personasToUse = alqueriaPersonas.slice(0, 5);
    }

    return personasToUse.map(p => ({
      name: p.name,
      profile: `${p.baseProfile.age} a√±os, ${p.baseProfile.occupation || p.baseProfile.profession || 'Profesional'}, ${p.baseProfile.location}`,
      dairyHabits: p.dairyConsumption.frequency,
      preferences: p.dairyConsumption.preferences ? p.dairyConsumption.preferences.slice(0, 3).join(', ') : 'L√°cteos tradicionales',
      lifestyle: p.baseProfile.lifestyle || p.lifestyle || 'Estilo de vida activo',
      concerns: p.dairyConsumption.concerns ? p.dairyConsumption.concerns.slice(0, 2).join(', ') : 'Calidad y precio'
    }));
  }

  /**
   * Prompt optimizado para an√°lisis directo
   */
  private async generateAnalysisWithClaude(concept: DairyConcept, personas: any[]): Promise<any> {
    const analysisPrompt = `
Eres un consultor senior especializado en consumer insights l√°cteos en Colombia con 15+ a√±os de experiencia.

Acabas de realizar entrevistas profundas IN-DEPTH de 90 minutos con ${personas.length} consumidores sobre el concepto l√°cteo "${concept.name}".

CONCEPTO A EVALUAR:
Nombre: ${concept.name}
Descripci√≥n: ${concept.description}
Categor√≠a: ${concept.category}
Beneficios: ${concept.benefits?.join(', ') || 'N/A'}
Marca: ${concept.brand || 'Alquer√≠a'}
Precio: ${concept.pricing || 'No definido'}

PERFILES ENTREVISTADOS:
${personas.map((p, i) => `
${i + 1}. ${p.name}
   - Perfil: ${p.profile}
   - Consumo l√°cteo: ${p.dairyHabits}
   - Preferencias: ${p.preferences}
   - Estilo de vida: ${p.lifestyle}
   - Valores: ${p.concerns}
`).join('')}

Como consultor experto, bas√°ndote en lo que REALMENTE pensar√≠an estos consumidores colombianos tras una ENTREVISTA PROFUNDA, genera un an√°lisis detallado en formato JSON:

{
  "overallRecommendation": "GO|REFINE|NO-GO",
  "overallScore": 1-10,
  "confidence": 1-10,
  "keyFindings": {
    "topBarriers": ["3-4 barreras cr√≠ticas muy espec√≠ficas del concepto"],
    "topOpportunities": ["3-4 oportunidades concretas y accionables"],
    "keyRecommendations": ["3-4 recomendaciones detalladas y espec√≠ficas"],
    "riskFactors": ["2-3 riesgos estrat√©gicos principales"]
  },
  "competitiveAnalysis": {
    "mainCompetitor": "Principal competidor directo",
    "competitiveAdvantages": ["2-3 ventajas claras vs competencia"],
    "competitiveWeaknesses": ["2-3 debilidades vs competencia"],
    "differentiationStrategy": "Estrategia clara de diferenciaci√≥n",
    "marketPositioning": "Posicionamiento recomendado en el mercado"
  },
  "adoptionJourney": {
    "awarenessStrategy": "C√≥mo generar conocimiento del producto",
    "trialDrivers": ["3 motivadores principales para primera compra"],
    "repeatPurchaseFactors": ["3 factores para recompra"],
    "potentialBlockers": ["2-3 bloqueadores en el journey"]
  },
  "consumptionOccasions": {
    "primary": ["2-3 ocasiones principales de consumo"],
    "secondary": ["2-3 ocasiones secundarias"],
    "unexploredOpportunities": ["2 oportunidades no exploradas"]
  },
  "marketProjection": {
    "targetMarketSize": "Tama√±o del mercado objetivo (descriptivo)",
    "estimatedPenetration": "Penetraci√≥n esperada (bajo/medio/alto)",
    "growthPotential": "Potencial de crecimiento (descriptivo)",
    "timeToMarket": "Tiempo sugerido para lanzamiento"
  },
  "segmentInsights": [
    {
      "personaName": "${personas[0]?.name || 'Persona 1'}",
      "personaProfile": "${personas[0]?.profile || 'Perfil'}",
      "overallReaction": "Positiva|Neutral|Negativa",
      "keyBarriers": ["2-3 barreras espec√≠ficas profundas"],
      "keyOpportunities": ["2-3 oportunidades espec√≠ficas"],
      "priceReaction": "Percepci√≥n detallada sobre precio",
      "competitorComparison": "Comparaci√≥n espec√≠fica vs sus marcas preferidas",
      "purchaseIntent": 1-10,
      "emotionalDrivers": ["2-3 motivadores emocionales profundos"],
      "frictionPoints": ["2-3 puntos de fricci√≥n espec√≠ficos"],
      "decisionInfluencers": ["2-3 influenciadores clave en su decisi√≥n"],
      "consumptionContext": "Contexto detallado de consumo",
      "representativeQuote": "Quote aut√©ntico y detallado sobre el concepto",
      "consumptionMomentQuote": "Quote sobre cu√°ndo/c√≥mo lo consumir√≠a"
    }
  ]
}

INSTRUCCIONES CR√çTICAS:
- Basarte en comportamiento REAL de consumidores colombianos
- NO menciones precios espec√≠ficos, porcentajes exactos o cantidades de dinero
- NO incluyas fechas espec√≠ficas, trimestres o a√±os
- NO inventes lanzamientos espec√≠ficos de competencia
- PROFUNDIDAD: Cada insight debe ser espec√≠fico y detallado, como si vinieras de una entrevista de 90 minutos
- Incluir comparaciones detalladas vs Alpina, Colanta, Parmalat, Nestl√©
- Los quotes deben ser largos (2-3 oraciones) y revelar insights profundos
- Considerar aspectos culturales, sociales y emocionales del consumo l√°cteo
- Analizar fricciones psicol√≥gicas y barreras culturales
- Identificar tensiones entre lo aspiracional y lo pr√°ctico
- Explorar din√°micas familiares en decisiones de compra
- Considerar influencia del canal tradicional vs moderno

RESPONDE SOLO EL JSON, SIN TEXTO ADICIONAL.
`;

    try {
      const response = await fetch('/api/claude-evaluation', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          model: 'claude-3-5-sonnet-20241022',
          max_tokens: 6000, // Suficiente para an√°lisis completo
          temperature: 0.3, // Balance entre creatividad y consistencia
          systemPrompt: 'Eres un consultor senior especializado en consumer insights l√°cteos en Colombia. Respondes SOLO con JSON v√°lido.',
          messages: [{ role: 'user', content: analysisPrompt }]
        })
      });

      if (!response.ok) {
        throw new Error(`Claude API error: ${response.status}`);
      }

      const data = await response.json();

      // Extraer contenido
      let content = '';
      if (data.content && Array.isArray(data.content) && data.content[0]?.text) {
        content = data.content[0].text;
      } else if (data.message) {
        content = data.message;
      } else if (data.response) {
        content = data.response;
      } else {
        throw new Error('Formato de respuesta inv√°lido');
      }

      // Limpiar y parsear
      content = this.cleanResponse(content);
      return JSON.parse(content);

    } catch (error) {
      console.error('‚ùå Error calling Claude API:', error);
      throw error;
    }
  }

  /**
   * Limpiar respuesta de Claude
   */
  private cleanResponse(content: string): string {
    let cleaned = content.trim();

    // Remover markdown
    cleaned = cleaned.replace(/```json\s*/g, '').replace(/```\s*/g, '');

    // Extraer JSON
    if (cleaned.includes('{')) {
      const start = cleaned.indexOf('{');
      const end = cleaned.lastIndexOf('}') + 1;
      cleaned = cleaned.substring(start, end);
    }

    return cleaned;
  }

  /**
   * Procesar an√°lisis de Claude a formato de evaluaci√≥n
   */
  private processAnalysisToEvaluation(
    concept: DairyConcept,
    analysis: any,
    startTime: number
  ): ConsultorEvaluation {
    const processingTime = Date.now() - startTime;

    return {
      conceptId: concept.id || 'unknown',
      conceptName: concept.name,
      evaluationMode: 'consultant',
      timestamp: new Date().toISOString(),
      recommendation: analysis.overallRecommendation || 'REFINE',
      overallScore: analysis.overallScore || 5,

      segmentAnalysis: analysis.segmentInsights?.map((insight: any) => ({
        personaName: insight.personaName,
        personaProfile: insight.personaProfile,
        overallReaction: insight.overallReaction,
        keyBarriers: insight.keyBarriers || [],
        keyOpportunities: insight.keyOpportunities || [],
        priceReaction: insight.priceReaction || 'Neutral',
        competitorComparison: insight.competitorComparison || 'N/A',
        purchaseIntent: insight.purchaseIntent || 5,
        emotionalDrivers: insight.emotionalDrivers || [],
        frictionPoints: insight.frictionPoints || [],
        decisionInfluencers: insight.decisionInfluencers || [],
        consumptionContext: insight.consumptionContext || 'No especificado',
        representativeQuote: insight.representativeQuote || 'Sin comentario espec√≠fico',
        consumptionMomentQuote: insight.consumptionMomentQuote
      })) || [],

      executiveSummary: {
        topBarriers: analysis.keyFindings?.topBarriers || ['No identificadas'],
        topOpportunities: analysis.keyFindings?.topOpportunities || ['No identificadas'],
        keyRecommendations: analysis.keyFindings?.keyRecommendations || ['Requiere m√°s an√°lisis'],
        riskFactors: analysis.keyFindings?.riskFactors || ['Sin riesgos identificados']
      },

      competitiveAnalysis: analysis.competitiveAnalysis || {
        mainCompetitor: 'No identificado',
        competitiveAdvantages: [],
        competitiveWeaknesses: [],
        differentiationStrategy: 'Por definir',
        marketPositioning: 'Por definir'
      },

      adoptionJourney: analysis.adoptionJourney || {
        awarenessStrategy: 'Por desarrollar',
        trialDrivers: [],
        repeatPurchaseFactors: [],
        potentialBlockers: []
      },

      consumptionOccasions: analysis.consumptionOccasions || {
        primary: [],
        secondary: [],
        unexploredOpportunities: []
      },

      marketProjection: analysis.marketProjection || {
        targetMarketSize: 'Por evaluar',
        estimatedPenetration: 'Por determinar',
        growthPotential: 'Por analizar',
        timeToMarket: 'Por definir'
      },

      processingTime,
      confidence: analysis.confidence || 7
    };
  }

  /**
   * Evaluaci√≥n de emergencia cuando falla Claude
   */
  private generateEmergencyEvaluation(concept: DairyConcept, startTime: number): ConsultorEvaluation {
    const processingTime = Date.now() - startTime;

    return {
      conceptId: concept.id || 'unknown',
      conceptName: concept.name,
      evaluationMode: 'consultant',
      timestamp: new Date().toISOString(),
      recommendation: 'REFINE',
      overallScore: 5,

      segmentAnalysis: [],

      executiveSummary: {
        topBarriers: ['Sistema temporalmente no disponible'],
        topOpportunities: ['Requiere evaluaci√≥n manual'],
        keyRecommendations: ['Contactar soporte t√©cnico'],
        riskFactors: ['Evaluaci√≥n incompleta']
      },

      processingTime,
      confidence: 1
    };
  }

  /**
   * Callback de progreso
   */
  private updateProgress(message: string) {
    if (this.progressCallback) {
      this.progressCallback(message);
    }
    console.log(message);
  }
}